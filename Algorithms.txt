Write a method to decide if two strings are anagrams or not.

What is an anangram?
	-An anagram is a word or phrase formed by rearranging the letters of a 
	different word or phrase, typically using all the original letters exactly once
	-Listen -> Silent

Must be the same length
Must have the same set of characters
Store ASCII values of each character count into a array of size 26 for each letter of an alphabet
Then compare the arrays to see if they contain the same count of the same characters

function isAnagram(strOne, strTwo) {
	if(strOne.length !== strTwo.length) {
		return false;
	}
	
	let strOneChars = fillCharArray(strOne);
	let strTwoChars = fillCharArray(strTwo);

	for(let i=0; i<26; i++) {
		if(strOneChars[i] !== strTwoChars[i]) {
			retuirn false;
		}
	}
	return true
}

function fillCharArray(str) {
	let arr = new Array(26).fill(0);
	
	for(let i=0; i<str.length; i++) {
		let charCode = str.charCodeAt(i);
		let ind = charCode - 97;
		
		arr[ind] += 1;
	}	

	return arr;
}





Write a method to replace all spaces in a string with ‘%20’.

Is this an inplace replacement? 
copy the string char by char but when there is a space add %20 in the new string.

function replaceSpace(str) {
	let ans = '';

	for(let i=0; i<str.length; i++) {
		if(str[i] === '') {
			ans += '%20';
		} else {
			ans += str[i];
		}		
	}
	return ans;
}

function replaceString(str) {
 	let i = 0;
	while(i<str.length) {
		if(str[i] === ' ') {
      			str = str.slice(0,i) + '%20' + str.slice(i+1);
      			i += 3;
    		} else {
      			i++;
    		}
	}
	return str;
}




Given a non-empty string like "Code" return a string like "CCoCodCode".

stringSplosion("Code") ? "CCoCodCode"
stringSplosion("abc") ? "aababc"
stringSplosion("ab") ? "aab"


The problem is asking for me to copy the string up to that point and then concatenate this to the answer


function stringSplosion(str) {
	let ans = '';

	for(let i=0; i<str.length; i++) {
		ans += str.slice(0,i+1);
	}
	return ans;
}



The classic word-count algorithm: given an array of strings, return a Map<String, Integer> 
with a key for each different string, with the value the number of times that string appears in the array.

wordCount(["a", "b", "a", "c", "b"]) ? {"a": 2, "b": 2, "c": 1}
wordCount(["c", "b", "a"]) ? {"a": 1, "b": 1, "c": 1}
wordCount(["c", "c", "c", "c"]) ? {"c": 4}

function wordCount(arrStrings) {
	let map = {};
	
	arrStrings.forEach(str => {
		if(str in map) {
			map[str] += 1
		} else {
			map[str] = 1
		}
	});
	return map;
}


Given an array of strings, return a Map<String, Integer> containing a key for every different 
string in the array, and the value is that string's length.

wordLen(["a", "bb", "a", "bb"]) ? {"bb": 2, "a": 1}
wordLen(["this", "and", "that", "and"]) ? {"that": 4, "and": 3, "this": 4}
wordLen(["code", "code", "code", "bug"]) ? {"code": 4, "bug": 3}

function wordLen(arrStrings) {
	let map = {};
	
	arrStrings.forEach(str => {
		if(!(str in map)) {
			map[str] = str.length
		}
	});
	return map;
}


Given a non-empty array, return true if there is a place to split the array so that the sum of 
the numbers on one side is equal to the sum of the numbers on the other side.

canBalance([1, 1, 1, 2, 1]) ? true
canBalance([2, 1, 1, 2, 1]) ? false
canBalance([10, 10]) ? true

1 3 9 10 7 5 1 7 8 15 6 15

use pointer from the beginning 
use pointer from the end
keep track of right sum and left sum
if right sum = left sum then move both pointers in
if right sum greater than left sum then move left pointer in
if left sum greater than right sum then move right pointer in

function canBalance(arr) {
	let left = arr.length-1;
	let right = 0;
	let rightSum = 0;
	let leftSum = 0;
	
	while(r <= l) {
		rightSum += arr[right];
		leftSum += arr[left];

		if(rightSum === leftSum) {
			right++
			left++
		} else if(rightSum > leftSum) {
			left++;
		} else {
			right++;
		}
	}

	return rightSum === leftSum;
}



